{"version":3,"sources":["components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Main","useState","city","setcity","search","setSearch","wd","setwd","useEffect","fetchAPI","a","url","process","fetch","resp","json","data","main","weather","console","log","today","Date","className","type","autoComplete","placeholder","onChange","event","target","value","toLocaleDateString","weekday","year","month","day","temp","temp_min","temp_max","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PA4FeA,EAxFF,WAEL,MAAoBC,mBAAS,MAA7B,mBAAMC,EAAN,KAAWC,EAAX,KACA,EAAyBF,mBAAS,SAAlC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAiBJ,mBAAS,MAA1B,mBAAOK,EAAP,KAAUC,EAAV,KAUAC,qBAAU,WAEP,IAAOC,EAAQ,uCAAC,gCAAAC,EAAA,6DAELC,EAFK,4DAEsDP,EAFtD,+BAEmFQ,oCAFnF,SAGOC,MAAMF,GAHb,cAGLG,EAHK,gBAIOA,EAAKC,OAJZ,OAILC,EAJK,OAKXb,EAAQa,EAAKC,MACbV,EAAMS,EAAKE,SANA,2CAAD,qDAUdT,IAEAU,QAAQC,IAAIR,mMAGd,CAACR,IAEH,IACIiB,EAAS,IAAIC,KAMrB,OACI,mCAEG,8BACC,sBAAKC,UAAU,WAAf,UACR,iCACE,uBAAOC,KAAK,OAAOC,aAAa,MAAMF,UAAU,aAAaG,YAAY,uBAAuBC,SAzC1E,SAACC,GAEbvB,EAAUuB,EAAMC,OAAOC,YAyCjC5B,EAKE,iCACA,0BAASqB,UAAU,WAAnB,UACE,qBAAKA,UAAU,OAAf,SAAuBnB,IACvB,qBAAKmB,UAAU,OAAf,SAAuBF,EAAMU,mBAAmB,QAvBpC,CAAEC,QAAS,OAAQC,KAAM,UAAWC,MAAO,OAAQC,IAAK,iBAyBtE,sBAAKZ,UAAU,UAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBrB,EAAKkC,KAAK,4CAE1B9B,EAIG,qBAAKiB,UAAU,UAAf,SAA0BjB,EAAG,GAAGW,OAHhC,kDAOV,sBAAKM,UAAU,SAAf,UAAyBrB,EAAKmC,SAA9B,YAA8CnC,EAAKoC,SAAnD,kBApBN,uD,YCvCWC,MAVf,WACE,OACE,mCAEE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d53e437d.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\n\r\n\r\n\r\nconst Main = () => {\r\n\r\n        const[city,setcity]=useState(null);\r\n        const [search,setSearch]=useState('Yemen');\r\n        const [wd,setwd]=useState(null);\r\n        const searchWeather=(event)=>{\r\n\r\n                setSearch(event.target.value);\r\n              \r\n        }\r\n       \r\n\r\n        \r\n\r\n        useEffect(() => {\r\n\r\n           const  fetchAPI=async()=>{\r\n\r\n                const url = `https://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=${process.env.REACT_APP_API_KEY}`\r\n                const resp =await fetch(url)\r\n                const data =await resp.json();\r\n                setcity(data.main);\r\n                setwd(data.weather);\r\n\r\n            }\r\n\r\n            fetchAPI();\r\n\r\n            console.log(process.env)\r\n            \r\n            \r\n        },[search] )\r\n\r\n        var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\n        var today  = new Date();\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        \r\n           <div>\r\n            <div className=\"app-wrap\">\r\n    <header>\r\n      <input type=\"text\" autoComplete=\"off\" className=\"search-box\" placeholder=\"Search for a city...\" onChange={searchWeather}/>\r\n    </header>\r\n    {!city?\r\n    <h2>No Data Found</h2>\r\n    \r\n    :\r\n    (\r\n        <main>\r\n        <section className=\"location\">\r\n          <div className=\"city\">{search}</div>\r\n          <div className=\"date\">{today.toLocaleDateString(\"en-US\", options)}</div>\r\n        </section>\r\n        <div className=\"current\">\r\n          <div className=\"temp\">{city.temp}<span>°C</span></div>\r\n         {\r\n                !wd?(\r\n                    <p>Seems like cloudy</p>\r\n                ):\r\n                (\r\n                    <div className=\"weather\">{wd[0].main}</div>\r\n                )\r\n\r\n         }\r\n          <div className=\"hi-low\">{city.temp_min} °C / {city.temp_max} °C</div>\r\n        </div>\r\n      </main>\r\n    )\r\n    \r\n    \r\n    }\r\n    \r\n     \r\n  </div>\r\n</div>\r\n        \r\n\r\n\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import Main from './components/Main';\nimport './App.css';\nimport './components/Main.css';\n\nfunction App() {\n  return (\n    <>\n\n      <Main></Main>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}